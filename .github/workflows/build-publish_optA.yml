name: OptA - Windows (Intel ifx) & Linux (gfortran) wheels + publish [ci_tests only]

on:
  push:
    branches: [ ci_tests ]
  pull_request:
    branches: [ ci_tests ]
  workflow_dispatch:
    inputs:
      target:
        description: "Publish target"
        required: false
        default: ""
        type: choice
        options: ["", "testpypi", "pypi"]

jobs:
  build-wheels:
    continue-on-error: true
    name: Build wheels (${{ matrix.os }}) â€” ${{ github.ref_name }}
    if: startsWith(github.ref, 'refs/heads/ci_tests')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, ubuntu-22.04]

    env:
      CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
      CIBW_SKIP: "pp* *-win32 *-musllinux_*"
      CIBW_ARCHS_WINDOWS: "AMD64"
      CIBW_ARCHS_LINUX: "x86_64"
      CIBW_TEST_COMMAND: >
        python -c "import pydsstools, sys; print('OK', sys.version, getattr(pydsstools,'__version__','?'))"
      CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
      CIBW_BEFORE_ALL_LINUX: >
        yum -y install gcc gcc-c++ gcc-gfortran zlib-devel libstdc++-devel &&
        echo "Installed gcc/gfortran and headers in manylinux"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Windows: install Intel Fortran (ifx)
      - name: Setup Intel Fortran (Windows)
        if: startsWith(matrix.os, 'windows-')
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: intel         # ifx; use 'intel-classic' for ifort
          # version: '2025.0'     # optional pin; omit to get latest supported

      - name: Show toolchain (Windows)
        if: startsWith(matrix.os, 'windows-')
        shell: cmd
        run: |
          where ifx   || ver
          where cl    || ver

      - name: Upgrade build tooling
        run: |
          python -m pip install -U pip wheel setuptools build
          python -m pip install -U cibuildwheel==2.*

      - name: Build wheels (Windows)
        if: startsWith(matrix.os, 'windows-')
        shell: cmd
        env:
          CIBW_ENVIRONMENT_WINDOWS: "FC=ifx"
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Build wheels (Linux)
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Build sdist
        run: |
          python -m build --sdist

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p dist
          cp -v wheelhouse/*.whl dist/
          cp -v dist/*.tar.gz dist/ 2>/dev/null || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*

  publish:
    name: Publish to (Test)PyPI
    needs: [build-wheels]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/ci_tests'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Choose repository URL
        id: repo
        run: |
          if [ "${{ github.event.inputs.target }}" = "testpypi" ]; then
            echo "url=https://test.pypi.org/legacy/" >> $GITHUB_OUTPUT
            echo "token_name=TEST_PYPI_API_TOKEN" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.target }}" = "pypi" ]; then
            echo "url=https://upload.pypi.org/legacy/" >> $GITHUB_OUTPUT
            echo "token_name=PYPI_API_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "url=" >> $GITHUB_OUTPUT
            echo "token_name=" >> $GITHUB_OUTPUT
          fi

      - name: Publish (pypa/gh-action-pypi-publish)
        if: steps.repo.outputs.url != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ steps.repo.outputs.url }}
          password: ${{ secrets[steps.repo.outputs.token_name] }}
          packages-dir: dist
          skip-existing: true
